package config

// THIS IS A GENERATED FILE. DO NOT MODIFY
// config.tmpl

import (
	"gitlab.com/beacon-software/gadget/environment"
	"gitlab.com/beacon-software/gadget/log"
)

// Specification details the expected values for the config
type Specification struct {
  Log log.Logger
  {{ range $env := .Specification.Environment}}
  {{ $env.Name }} {{ $env.Type }}{{if $env.Env }} `env:"{{$env.Env}}{{if $env.Optional}},optional{{end}}"{{if $env.S3}} s3:"{{$env.S3}}"{{end}}`{{end}}{{end}}
  {{ range $service := .Specification.Services }}
  {{$service.Name}} {{$service.Type}}{{end}}
}

// New returns a Specification based on the environment
func New() *Specification {
	return NewValues(environment.GetEnvMap())
}

// NewValues returns a Specification based on the env var map passed in
func NewValues(envVars map[string]string) *Specification {
	s := &Specification{ {{ range $env := .Specification.Environment }}
		{{ if and $env.Optional $env.Default }}{{$env.Name}}: {{$env.Default}},{{end}}{{end}}
	}
	err := environment.ProcessMap(s, envVars)
	if nil != err {
		panic(log.Error(err))
	}

	s.Log = log.New("{{.Name}}", log.FunctionFromEnv())

	{{ range $service := .Specification.Services }}
  	s.{{$service.Name}} = {{$service.Initializer}}{{end}}

	return s
}
